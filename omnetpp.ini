[General]
network = NetworkMain


# Simulation time is in seconds
# This is the time that the simulation wll run before terminating
NetworkMain.simulationTime = 1000

# This is the number of packets that will be sent by the traffic generator
# before the simulation is terminated
NetworkMain.numberOfPacketsBeforeEnding = 500

# These variables must be changed together
# i.e. if you change the number of servers to 4 then you must change the addresses.
NetworkMain.numberOfServers = 3

# The address is like the ID of each server
# They must be sequential (i.e. 1 for first server, 2 for second, etc ...)
# if you want to test more or less servers, you MUST edit the addresses accordingly
NetworkMain.servers[0].address = 1
NetworkMain.servers[1].address = 2
NetworkMain.servers[2].address = 3



# This integer defines the algorithm.
# 0 --> Random
# 1 --> Round Robin
# 2 --> Weighted Round Robin
# 3 --> Least Connections
NetworkMain.algorithm = 0


### Distance between Network Node and Load Balancer
NetworkMain.distanceNetNodeToLd = 10km

### Distance between the Load Balancer and the Servers
NetworkMain.distanceLdToServers = 5km



# packet size is in bytes
# initially it is 1000 bytes (8000 bits)
### If you alter the packet size in here you need to also alter it in the toplogy.ned file
### in order for the delay to be correct.
NetworkMain.netWorkNode.TrafficGenerator.packet_size = 1000


# Traffic_data_rate in bits per second
# Default is 8000 bit/sec
# Since the default packet size is 1000 bytes (8000 bits)
# and the default traffic data rate is 8000 bits/sec that means
# we are sending 1 packet per second. (by default)
NetworkMain.netWorkNode.TrafficGenerator.traffic_data_rate = 8000



	#### SERVER INFO ####


# Queue capacity of servers
# A difference queue capacity can be set for each server
NetworkMain.servers[*].queue.capacity = 5

# should be changed. Each server can have its own pp
# Server processing power unit is in Mb/s (Megabits per second)
NetworkMain.servers[*].processor.processingPower = 1


# Each server can have it's own weight
# sum of weights must be equal to 3N where N is the total number of servers
# The weight must be set for each server.
# Initially, The first server has a weight of 6
# the second a weight of 4
# and the third a weight of 2
NetworkMain.servers[0].weight = 6
NetworkMain.servers[1].weight = 4
NetworkMain.servers[2].weight = 2




	#### RESULT RECORDING ####

# View results in the results folder
record-eventlog = true

